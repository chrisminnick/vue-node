GET http://localhost:3000/api/articles
Content-Type: application/json
###

POST http://localhost:3000/api/articles
Content-Type: application/json

{
    "title":"Dockers",
    "description":"An official site for NodeJS in Docker",
    "body": "node:<version>This is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of. Some of these tags may have names like bullseye, buster, or stretch in them. These are the suite code names for releases of Debian and indicate which release the image is based on. If your image needs to install any additional packages beyond what comes with the image, you'll likely want to specify one of these explicitly to minimize breakage when there are new releases of Debian.",
    "tagList": "https://hub.docker.com/_/node",
    "author": "Docker"
}

###

POST http://localhost:3000/api/articles
Content-Type: application/json
 
{
    "title":"Dockerizing a Node.js web app",
    "description":"Steps to Dockerize NodeJS",
    "body": "The goal of this example is to show you how to get a Node.js application into a Docker container. The guide is intended for development, and not for a production deployment. The guide also assumes you have a working Docker installation and a basic understanding of how a Node.js application is structured. In the first part of this guide we will create a simple web application in Node.js, then we will build a Docker image for that application, and lastly we will instantiate a container from that image.",
    "tagList": "https://nodejs.org/en/docs/guides/nodejs-docker-webapp/",
    "author": "NodeJS"
}

###
GET http://localhost:3000/api/articles
Content-Type: application/json

###
GET http://localhost:3000/
Content-Type: application/json